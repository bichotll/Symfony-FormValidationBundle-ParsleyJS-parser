/*! symfony-form-validator-parsleyjs-parser - v0.0.1 - 2014-07-04
* https://github.com/bichotll/symfony-form-validator-parsleyjs-parser
* Copyright (c) 2014 bichotll; Licensed Apache2 */
!function(a){"use strict";function b(b){a.each(a.sfvparsley.options.object,function(a,d){if(0!==d.constraints.length){var e=["Default"];0!==d.validationGroups.length&&(e=d.validationGroups),c(b,d,e)}})}function c(b,c,e){a.each(e,function(e,f){a.each(c.constraints[f],function(a,e){d(b,c,e)})})}function d(b,c,d){a.each(e,function(a,e){if(d.class===a){var f=b.find('[name="'+c.fullPathName+'"]');e(f,c,d)}})}a.fn.sfvparsley=function(c){if(a.sfvparsley.options=a.extend({},c),""===a.sfvparsley.options.object)throw"No object inserted";return this.each(function(){a(this).data("data-parsley-validate",!0),b(a(this)),a.sfvparsley.options.initParsley===!0&&a(this).parsley()})};var e={"Symfony\\Component\\Validator\\Constraints\\NotBlank":function(a){f.required(a)},"Symfony\\Component\\Validator\\Constraints\\Blank":function(){},"Symfony\\Component\\Validator\\Constraints\\NotNull":function(a){f.required(a)},"Symfony\\Component\\Validator\\Constraints\\Null":function(){},"Symfony\\Component\\Validator\\Constraints\\True":function(){},"Symfony\\Component\\Validator\\Constraints\\False":function(){},"Symfony\\Component\\Validator\\Constraints\\Type":function(){},"Symfony\\Component\\Validator\\Constraints\\Email":function(a){f.email(a)},"Symfony\\Component\\Validator\\Constraints\\Length":function(a,b,c){f.minLength(a,c.min),f.maxLength(a,c.max)},"Symfony\\Component\\Validator\\Constraints\\Url":function(a){f.url(a)},"Symfony\\Component\\Validator\\Constraints\\Regex":function(a,b,c){f.pattern(a,c.pattern)},"Symfony\\Component\\Validator\\Constraints\\Ip":function(a){var b="^\\d+.\\d+.\\d+\\.\\d$";f.pattern(a,b)},"Symfony\\Component\\Validator\\Constraints\\Uuid":function(a){var b="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}";f.pattern(a,b)},"Symfony\\Component\\Validator\\Constraints\\Range":function(a,b,c){var d="["+c.min+","+c.max+"]";f.range(a,d)},"Symfony\\Component\\Validator\\Constraints\\EqualTo":function(){},"Symfony\\Component\\Validator\\Constraints\\NotEqualTo":function(){},"Symfony\\Component\\Validator\\Constraints\\IdenticalTo":function(){},"Symfony\\Component\\Validator\\Constraints\\NotIdenticalTo":function(){},"Symfony\\Component\\Validator\\Constraints\\LessThan":function(a,b,c){f.max(a,c.value)},"Symfony\\Component\\Validator\\Constraints\\LessThanOrEqual":function(a,b,c){f.max(a,c.value)},"Symfony\\Component\\Validator\\Constraints\\GreaterThan":function(a,b,c){f.min(a,c.value)},"Symfony\\Component\\Validator\\Constraints\\GreaterThanOrEqual":function(a,b,c){f.min(a,c.value)},"Symfony\\Component\\Validator\\Constraints\\Date":function(){},"Symfony\\Component\\Validator\\Constraints\\DateTime":function(){},"Symfony\\Component\\Validator\\Constraints\\Time":function(){},"Symfony\\Component\\Validator\\Constraints\\Choice":function(){},"Symfony\\Component\\Validator\\Constraints\\Collection":function(){},"Symfony\\Component\\Validator\\Constraints\\Count":function(){},"Symfony\\Component\\Validator\\Constraints\\UniqueEntity":function(){},"Symfony\\Component\\Validator\\Constraints\\Language":function(){},"Symfony\\Component\\Validator\\Constraints\\Locale":function(){},"Symfony\\Component\\Validator\\Constraints\\Country":function(){},"Symfony\\Component\\Validator\\Constraints\\File":function(){},"Symfony\\Component\\Validator\\Constraints\\Image":function(){},"Symfony\\Component\\Validator\\Constraints\\CardScheme":function(){},"Symfony\\Component\\Validator\\Constraints\\Currency":function(){},"Symfony\\Component\\Validator\\Constraints\\Luhn":function(){},"Symfony\\Component\\Validator\\Constraints\\Iban":function(a){var b="[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{4}[0-9]{7}([a-zA-Z0-9]?){0,16}";f.pattern(a,b)},"Symfony\\Component\\Validator\\Constraints\\Isbn":function(){},"Symfony\\Component\\Validator\\Constraints\\Issn":function(){},"Symfony\\Component\\Validator\\Constraints\\Callback":function(){},"Symfony\\Component\\Validator\\Constraints\\Expression":function(){},"Symfony\\Component\\Validator\\Constraints\\All":function(){},"Symfony\\Component\\Validator\\Constraints\\UserPassword":function(){},"Symfony\\Component\\Validator\\Constraints\\Valid":function(){}},f={required:function(a){a.data("parsley-required",!0),a.attr("required","required")},email:function(a){a.data("parsley-type","email")},number:function(a){a.data("parsley-type","number")},integer:function(a){a.data("parsley-type","integer")},digits:function(a){a.data("parsley-type","digits")},alphanum:function(a){a.data("parsley-type","alphanum")},url:function(a){a.data("parsley-type","url")},minLength:function(a,b){a.data("parsley-type-minlength",b)},maxLength:function(a,b){a.data("parsley-type-maxlength",b)},min:function(a,b){a.data("parsley-type-min",b)},max:function(a,b){a.data("parsley-type-max",b)},range:function(a,b){a.data("parsley-type-range",b)},pattern:function(a,b){a.data("parsley-type-pattern",b),a.attr("pattern",b)},minCheck:function(a,b){a.data("parsley-type-mincheck",b)},maxCheck:function(a,b){a.data("parsley-type-maxcheck",b)},equalto:function(a,b){a.data("parsley-type-equalto",b)}};a.sfvparsley=function(b){a.sfvparsley.options=a.extend({},b)},a.sfvparsley.options={object:"",setMessages:!1,initParsley:!1}}(jQuery);